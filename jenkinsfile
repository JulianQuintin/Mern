pipeline {
    agent any

    environment {
        DOCKER_CMD = '/usr/local/bin/docker'
        KUBECTL_CMD = '/usr/local/bin/kubectl'
        DOCKER_IMAGE = "julianquintin/mern-mysql-crud-master:\${env.BUILD_NUMBER}"
        MINIKUBE_PROFILE = "mern-cluster"
    }

    stages {
        stage('Verify and Install Minikube') {
            steps {
                script {
                    sh '''
                        # Verificar si Minikube está instalado
                        if ! command -v minikube >/dev/null 2>&1; then
                            echo "Instalando Minikube..."
                            
                            # Método universal de instalación (funciona en Mac/Linux)
                            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
                            sudo install minikube-darwin-amd64 /usr/local/bin/minikube
                            rm minikube-darwin-amd64
                            
                            # Verificar instalación
                            minikube version || { echo "Minikube installation failed"; exit 1; }
                        fi
                    '''
                }
            }
        }

        stage('Start Minikube Cluster') {
            steps {
                script {
                    sh '''
                        # Iniciar Minikube si no está corriendo
                        if ! minikube status -p ${MINIKUBE_PROFILE} >/dev/null 2>&1; then
                            minikube start -p ${MINIKUBE_PROFILE} --driver=docker \\
                                --cpus=4 --memory=8192 --disk-size=20g \\
                                --force-systemd=true \\
                                --embed-certs=true
                        fi

                        # Configurar entorno Docker
                        eval $(minikube docker-env -p ${MINIKUBE_PROFILE})
                        export KUBECONFIG=$(minikube kubectl config view -p ${MINIKUBE_PROFILE} --flatten)
                    '''
                }
            }
        }

        // Resto de los stages se mantienen igual que en el Jenkinsfile anterior
        // (Checkout Code, Build Docker Image, Deploy to Kubernetes)
    }

    post {
        always {
            echo "Pipeline execution completed with status: ${currentBuild.currentResult}"
            sh """
                # Limpiar entorno Docker
                eval \$(${env.KUBECTL_CMD} minikube docker-env -u)
                ${env.DOCKER_CMD} system prune -f || true
            """
        }
        failure {
            script {
                sh """
                    echo '=== DIAGNÓSTICO DEL FALLO ==='
                    echo "=== Versiones ==="
                    minikube version || true
                    ${env.KUBECTL_CMD} version --client || true
                    ${env.DOCKER_CMD} --version || true
                    
                    echo "=== Estado Minikube ==="
                    minikube status -p ${env.MINIKUBE_PROFILE} || true
                    
                    echo "=== Recursos Kubernetes ==="
                    ${env.KUBECTL_CMD} get all -n ${env.MINIKUBE_PROFILE} || true
                    ${env.KUBECTL_CMD} describe deployment mern-crud-app -n ${env.MINIKUBE_PROFILE} || true
                    ${env.KUBECTL_CMD} get events -n ${env.MINIKUBE_PROFILE} --sort-by=.metadata.creationTimestamp || true
                """
            }
        }
    }
}