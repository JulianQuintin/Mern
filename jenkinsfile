pipeline {
    agent any
    environment {
        // Configuración de Docker
        DOCKER_IMAGE = 'julianquintin/mern-mysql-crud-master'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        
        // Configuración de Kubernetes
        K8S_NAMESPACE = 'mern-crud-ns'
        APP_NAME = 'mern-crud-app1'
        
        // Credenciales (configurar en Jenkins)
        DOCKERHUB_CREDS = credentials('dockerhub-creds')
        KUBECONFIG_FILE = credentials('kubeconfig')
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/JulianQuintin/Mern.git'
                extensions: [
                    [$class: 'CleanBeforeCheckout']
                ]
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Construir la imagen usando el Dockerfile en la raíz
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                sh 'docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit'
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', DOCKERHUB_CREDS) {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push('latest')
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Configurar kubectl
                    withEnv(["KUBECONFIG=${KUBECONFIG_FILE}"]) {
                        // Aplicar los manifiestos de Kubernetes
                        sh """
                            kubectl apply -f k8s/namespace.yaml
                            kubectl apply -f k8s/configmap.yaml
                            kubectl apply -f k8s/secrets.yaml
                            kubectl apply -f k8s/mysql-deployment.yaml
                            kubectl apply -f k8s/app-deployment.yaml
                            kubectl apply -f k8s/service.yaml
                            
                            # Actualizar la imagen del deployment
                            kubectl set image deployment/${APP_NAME} ${APP_NAME}=${DOCKER_IMAGE}:${DOCKER_TAG} -n ${K8S_NAMESPACE}
                            
                            # Esperar a que el despliegue esté listo
                            kubectl rollout status deployment/${APP_NAME} -n ${K8S_NAMESPACE}
                        """
                    }
                }
            }
        }
        
        stage('Smoke Test') {
            steps {
                script {
                    // Obtener la IP externa del servicio
                    def SERVICE_IP = sh(
                        script: "kubectl get svc ${APP_NAME}-service -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'",
                        returnStdout: true
                    ).trim()
                    
                    // Prueba básica de conectividad
                    sh "curl -sSf http://${SERVICE_IP}/api/health"
                }
            }
        }
    }
    
    post {
        success {
            slackSend(color: 'good', message: "Deployment ${APP_NAME} v${DOCKER_TAG} succeeded!")
        }
        failure {
            slackSend(color: 'danger', message: "Deployment ${APP_NAME} v${DOCKER_TAG} failed!")
        }
        always {
            // Limpieza
            sh 'docker system prune -f'
        }
    }
}