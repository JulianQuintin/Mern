pipeline {
    agent any

    environment {
        // Configura las rutas absolutas para Docker
        DOCKER_CMD = '/usr/local/bin/docker'
        DOCKER_COMPOSE_CMD = '/usr/local/bin/docker-compose'
        DOCKER_IMAGE = 'julianquintin/mern-mysql-crud-master'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Verify Docker') {
            steps {
                script {
                    // Verifica que Docker esté instalado y accesible
                    sh """
                        ${DOCKER_CMD} --version || echo "ERROR: Docker no está instalado o no es accesible"
                        ${DOCKER_COMPOSE_CMD} --version || echo "ERROR: Docker Compose no está instalado"
                    """
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/JulianQuintin/Mern.git',
                        credentialsId: 'GitHubtoken2'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "${DOCKER_CMD} build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f dockerfile ."
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh "${DOCKER_COMPOSE_CMD} -f docker-compose.test.yml up --build --abort-on-container-exit"
                    } finally {
                        sh "${DOCKER_COMPOSE_CMD} -f docker-compose.test.yml down -v"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Limpieza segura (ignora errores)
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "${DOCKER_CMD} system prune -f"
                }
                
                // Notificación básica (sin Slack)
                echo "Build ${currentBuild.currentResult} - ${env.BUILD_URL}"
            }
        }
    }
}