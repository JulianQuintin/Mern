pipeline {
    agent any

    environment {
        // Configuración básica
        DOCKER_CMD = 'docker'
        KUBECTL_CMD = 'kubectl'
        DOCKER_IMAGE = "julianquintin/mern-mysql-crud-master:${env.BUILD_NUMBER}"
        MINIKUBE_PROFILE = "mern-cluster"
        
        // Configuración del entorno Minikube
        MINIKUBE_ENV_FILE = "${WORKSPACE}/minikube-env"
    }

    stages {
        stage('Configure Minikube Environment') {
            steps {
                script {
                    // Configurar el entorno para usar Minikube
                    sh """
                        # Generar archivo de entorno Minikube
                        minikube docker-env -p ${MINIKUBE_PROFILE} > ${MINIKUBE_ENV_FILE}
                        
                        # Cargar variables de entorno
                        . ${MINIKUBE_ENV_FILE}
                        
                        # Configurar kubectl para usar el cluster de Minikube
                        minikube update-context -p ${MINIKUBE_PROFILE}
                        
                        # Verificar conexión
                        kubectl cluster-info
                    """
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/JulianQuintin/Mern.git',
                        credentialsId: 'GitHubtoken2'
                    ]]
                ])
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        # Construir imagen usando el Docker de Minikube
                        docker build -t ${env.DOCKER_IMAGE} -f dockerfile .
                        
                        # Verificar que la imagen se creó correctamente
                        docker images | grep ${env.DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                        # Crear namespace si no existe
                        kubectl create namespace ${env.MINIKUBE_PROFILE} --dry-run=client -o yaml | kubectl apply -f -
                        
                        # Configurar política de imagen local
                        kubectl patch deployment mern-crud-app -n ${env.MINIKUBE_PROFILE} \
                            -p '{"spec":{"template":{"spec":{"containers":[{"name":"mern-crud-app","imagePullPolicy":"Never"}]}}}}' || true
                        
                        # Aplicar configuraciones
                        kubectl apply -f k8s/namespace.yaml
                        kubectl apply -f k8s/mysql-deployment.yaml -n ${env.MINIKUBE_PROFILE}
                        kubectl apply -f k8s/app-deployment.yaml -n ${env.MINIKUBE_PROFILE}
                        kubectl apply -f k8s/service.yaml -n ${env.MINIKUBE_PROFILE}
                        
                        # Actualizar imagen
                        kubectl set image deployment/mern-crud-app mern-crud-app=${env.DOCKER_IMAGE} -n ${env.MINIKUBE_PROFILE}
                        
                        # Esperar despliegue con manejo robusto
                        timeout 600 bash -c "
                            while ! kubectl rollout status deployment/mern-crud-app -n ${env.MINIKUBE_PROFILE} --timeout=60s; do
                                echo '=== Estado actual ===';
                                kubectl get pods -n ${env.MINIKUBE_PROFILE} -o wide;
                                echo '=== Logs de pods ===';
                                kubectl logs -n ${env.MINIKUBE_PROFILE} -l app=mern-crud-app --all-containers=true --tail=50 || true;
                                echo '=== Reintentando en 10 segundos ===';
                                sleep 10;
                            done
                        "
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed with status: ${currentBuild.currentResult}"
            sh """
                # Limpiar entorno Docker
                eval \$(minikube docker-env -u -p ${env.MINIKUBE_PROFILE}) || true
                docker system prune -f || true
                
                # Opcional: Limpiar archivo de entorno
                rm -f ${env.MINIKUBE_ENV_FILE} || true
            """
        }
        failure {
            script {
                sh """
                    echo '=== DIAGNÓSTICO DEL FALLO ==='
                    echo "=== Versiones ==="
                    minikube version -p ${env.MINIKUBE_PROFILE} || true
                    kubectl version --client || true
                    docker --version || true
                    
                    echo "=== Estado Minikube ==="
                    minikube status -p ${env.MINIKUBE_PROFILE} || true
                    
                    echo "=== Recursos Kubernetes ==="
                    kubectl get all -n ${env.MINIKUBE_PROFILE} || true
                    kubectl describe deployment mern-crud-app -n ${env.MINIKUBE_PROFILE} || true
                    kubectl get events -n ${env.MINIKUBE_PROFILE} --sort-by=.metadata.creationTimestamp || true
                """
            }
        }
    }
}