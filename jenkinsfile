pipeline {
    agent {
        label 'master' // Use a node with Docker installed or 'any' if you prefer
    }

    tools {
        git 'Git' // Ensure this matches your Git tool name in Jenkins
    }

    environment {
        DOCKER_IMAGE = 'julianquintin/mern-mysql-crud-master'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CloneOption', depth: 1, shallow: true]
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/JulianQuintin/Mern.git',
                        credentialsId: 'GitHubtoken2'
                    ]]
                ])
            }
        }

        stage('Setup Docker') {
            steps {
                script {
                    // Verify Docker is available
                    sh '/usr/local/bin/docker --version || echo "Docker not found"'
                    
                    // Alternative: Install Docker if missing (requires admin permissions)
                    // sh '''
                    //    if ! command -v docker &> /dev/null; then
                    //        curl -fsSL https://get.docker.com | sh
                    //        sudo usermod -aG docker jenkins
                    //    fi
                    // '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "/usr/local/bin/docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ./docker"
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh '/usr/local/bin/docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit'
                    } finally {
                        sh '/usr/local/bin/docker-compose -f docker-compose.test.yml down -v'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Cleanup
                sh '/usr/local/bin/docker system prune -f || true'
                
                // Simple notification (replace with slackSend if plugin is installed)
                echo "Build ${currentBuild.currentResult} - ${env.BUILD_URL}"
            }
        }
    }
}
}